---
title: "GHC: Present and Future"
venue: Boston Haskell
author: Ben Gamari
date: 24 May 2017
transition: "none"
---

## GHC 8.2 in a nutshell

 * Focus on consolidation and stabilization
 
 * Compiler performance

 * Lots of exciting incremental improvements
 
 * A few new features

# Compiler Performance
## Compiler Performance

 * Improvements all over the compiler. To name just a few...

    - More efficient handling of names
    - Lazy deserialization of interface files
    - Fix laziness of instance visibility check
    - Early inlining
   
 * But don't take my word for it...

## Compiler performance by the numbers

![](allocs.pdf)

## Compiler performance by the numbers

```
-------------------------------------------------
   Program            8.0.2.log    8.2.1-rc2.log
-------------------------------------------------

Compile Allocations
   -1 s.d.                -----           -35.7%
   +1 s.d.                -----            -3.3%
   Average                -----           -21.2%

Compile Times
   -1 s.d.                -----           -23.2%
   +1 s.d.                -----            +7.1%
   Average                -----            -9.3%
```

## Compiler performance by the numbers

Chris Allen's `bloodhound` package

| compiler | user time (seconds) |
|---------:|---------------------|
| GHC 7.8  |              129.12 |
| GHC 7.10 |              163.38 |
| GHC 8.0  |              147.44 |
| GHC 8.2  |              126.37 |


# New Typeable


## `Typeable` (`@simonpj`, `@goldfire`, `@bgamari`)

```haskell
-- Runtime value representing a type.
data TypeRep

class Typeable a where
    typeRep :: Proxy a -> TypeRep
```

Introduced long ago, used by numerous consumers including `wai`, Cloud Haskell,
`HList`, and many others.

## `Data.Dynamic`

```haskell
data Dynamic where
    Dyn :: TypeRep -> a -> Dynamic
    
fromDyn :: forall a. Typeable a => Dynamic -> Maybe a
fromDyn (Dyn rep x)
  | rep == rep' = Just $ unsafeCoerce x   -- the horror!
  | otherwise   = Nothing
  where rep' = typeRep (Proxy @a)
```

. . .

```haskell
-- Function application
appDyn :: Dynamic        -- a -> b
       -> Dynamic        -- a
       -> Maybe Dynamic  -- b
appDyn f x = {- more unsafe trickiness -}
```

## New `Typeable` (or rather, `Reflection`)

Why not add an index to `TypeRep` [@typed-reflection-in-haskell]?

```haskell
-- Runtime evidence of the identity of a type
data TypeRep a

class Typeable a where
    typeRep :: forall a. TypeRep a

data a :~: b where
    Refl :: (a ~ b) => a :~: b

eqTypeRep :: TypeRep a -> TypeRep b -> Maybe (a :~: b)
```

## `Dynamic` with reflection

<div class=notes>
Now the compiler can see that the `TypeRep` represents the type of the dynamic
value,
</div>

```haskell
data Dynamic where
    Dyn :: TypeRep a -> a -> Dynamic
```

. . .

```haskell
fromDyn :: forall a. Typeable a => Dynamic -> Maybe a
fromDyn (Dyn rep x)
  | Just Refl <- rep `eqTypeRep` rep' = Just x  -- yay!
  | otherwise                         = Nothing
  where rep' = typeRep @a
```

## `appDyn` with reflection

```haskell
pattern Fun :: forall fun. ()
            => forall arg res. (fun ~ (arg -> res))
            => TypeRep arg
            -> TypeRep res
            -> TypeRep fun

-- Function application
appDyn :: Dynamic -> Dynamic -> Maybe Dynamic
appDyn (Dyn ra xa) (Dyn rb xb)
  | Fun argRep resRep <- ra
  , Just Refl <- rb `eqTypeRep` argRep
  = Just $ Dyn (xa xb)

  | otherwise
  = Nothing
```

## Reflecting on `TypeRep` kinds

```haskell
typeRepKind :: TypeRep (a :: k) -> TypeRep k
```

. . .

For instance,
```haskell
>>> typeRepKind (typeRep @Maybe)
* -> *
>>> typeRepKind (typeRep @Eq)
* -> Constraint
```

## Robustness

* Can represent more types; lots of papercuts fixed:

    ```haskell
    >>> :info Int
    data Int = GHC.Types.I# GHC.Prim.Int#
    ...
    >>> typeRepKind (typeRep @GHC.Types.'I#)
    Int# -> Int
    ```

    (Still no ability to represent higher-rank types)

# Compact regions (`@ezyang` et al.)
## Compact regions

Collect a closed set of heap objects into a single "compact region".

In exchange for prompt GC we get,

 * Reduced GC tracing costs in programs of the form

    ```haskell
    let someLargeValue = ...
    in someLongComputation
    ```

 * Efficient (possibly zero-copy) serialization
 

# Debugging and profiling (`@bgamari`, `@scpwm`)

## Debugging today

- Cost-centre profiler: Costly, changes code
- `HasCallStack`: Costly, manual, changes code
- Ticky-ticky profiler: Low-level, requires recompilation
- Eventlog: Requires relinking, manual

## DWARF debug information (`ghc -g`)

* e.g. `gdb` on GHC-compiled programs
* Why DWARF?
    - Doesn't affect code generation
    - Requires no instrumentation
    - Relatively cheap to produce
    
* Introduced in 7.10
* Improved in 8.0
* Usable in 8.2

## Getting a stacktrace

* `GHC.ExecutionStack`: stack traces from within Haskell program
* `SIGUSR2`: Send to Haskell program, trace dumped to `stderr`
* Native debugger: e.g. `gdb`, `lldb`

## Example

\tiny

```
 0x1c1d76f    (null) (compiler/typecheck/TcInteract.hs:417.18)
 0x1c1d7c0    sR9L_info (compiler/typecheck/TcInteract.hs:397.24)
 0x1c1d7c0    sR9L_info (compiler/typecheck/TcInteract.hs:397.24)
 0x1c1d7c0    sR9L_info (compiler/typecheck/TcInteract.hs:397.24)
 0x1c1d7c0    sR9L_info (compiler/typecheck/TcInteract.hs:397.24)
 0x1c1d7c0    sR9L_info (compiler/typecheck/TcInteract.hs:397.24)
 0x1c99b90    ghc_TcSMonad_runTcS2_info (compiler/typecheck/TcSMonad.hs:2398.1)
 0x1a1e210    ghc_TcSimplify_tcCheckSatisfiability1_info (compiler/typecheck/TcSimplify.hs:482.1)
 0x19d63a0    sM9u_info (compiler/typecheck/TcRnMonad.hs:333.37)
 0x3568be8    stg_catch_frame_info (rts/Exception.cmm:370.1)
 0x19d6870    ghc_TcRnMonad_initTcWithGbl1_info (compiler/typecheck/TcRnMonad.hs:312.1)
 0x2572b08    rN1e_info (compiler/deSugar/Check.hs:1140.1)
 0x259f7f0    sPS2_info (compiler/deSugar/Check.hs:330.23)
 0x3568be8    stg_catch_frame_info (rts/Exception.cmm:370.1)
 0x25a0610    sPYq_info (compiler/deSugar/Check.hs:324.1)
  0x8c8138    ghc_Match_zdwmatchWrapper_info (compiler/deSugar/Match.hs:743.11)
  0x832308    sHHA_info (compiler/deSugar/DsExpr.hs:294.48)
  0x8479f0    sIRe_info (compiler/deSugar/DsExpr.hs:271.5)
  0x82a260    sHbC_info (compiler/deSugar/DsExpr.hs:250.5)
  0x832c28    sHIG_info (compiler/deSugar/DsExpr.hs:352.29)
  0x879138    sAxD_info (compiler/deSugar/DsMonad.hs:473.19)
 0x3568be8    stg_catch_frame_info (rts/Exception.cmm:370.1)
  0x8795c0    ghc_DsMonad_askNoErrsDs1_info (compiler/deSugar/DsMonad.hs:469.16)
  0x832f78    sHJl_info (compiler/deSugar/DsExpr.hs:351.5)
  0x861ee8    sqpa_info (compiler/deSugar/DsGRHSs.hs:90.5)
  0x863210    sqry_info (compiler/deSugar/DsGRHSs.hs:62.27)
  0x863758    sqsu_info (compiler/deSugar/DsGRHSs.hs:62.5)
  0x863c08    sqt3_info (compiler/deSugar/DsGRHSs.hs:49.1)
  0x81ec80    ghc_DsBinds_zdwdsLHsBind_info (compiler/deSugar/DsBinds.hs:165.36)
 0x1f06290    ghc_IOEnv_zdfApplicativeIOEnv3_info (compiler/utils/IOEnv.hs:73.5)
 ...
```

## Status for 8.2

- Using it
    * Currently Linux, amd64 and i386
    * `libdw`, GHC configured with `--enable-dwarf-unwind`
    * All linked code (including core libraries) built with `ghc -g`

. . .

* Packaging questions remain: 
    - Debug-enabled bindists are >200MB larger
    - More runtime library dependencies (e.g. `libdw`), more distribution dependent
    - Should we produce binary distributions with debug symbols? 
    - For which distributions?
  
## The Future: Statistical profiling

* "Cost-free" profiling: won't affect code generation
* Sample on a wider variety of events than CC profiler:
    - Allocations
    - CPU cycles
    - Architectural performance counters: Cache misses, stalls, etc.
    - Black-hole block events
    - Spark fizzles
    - etc.

## Challenges to statistical profiling

- Reasoning about causality in an optimized lazy language is quite difficult,
  requiring more metadata and more sophisticated analysis tools than
  typically needed for more traditional languages

- GHC's calling convention is atypical, precluding use of the system's
  native callgraph collection mechanism (e.g. `perf_events`)


## Statistical profiling: Two roads

a. Build Haskell-specific tooling
    - Pro: Easier to address Haskell-specific challenges
    - Pro: Generally platform independent
    - Con: Requires developing a whole tooling ecosystem
    - Prototype: <http://github.com/bgamari/ghc/tree/libdw-prof>

b. Piggyback on native tools (e.g. `perf`)
    - Pro: Integrates with rest of system
    - Con: Requires tricky integration
    - Con: Difficult to reach feature-parity with Haskell-specific option
    - Con: Necessarily operating-system specific
    - Another option: Change GHC calling convention to match native

## The Future: Stack traces on exceptions

* Tricky trade-offs need to be made
* Stacktrace collection is expensive
* Haskell programs sometimes use (asynchronous) exceptions for flow-control
* Ensuring compatibility
* See <https://ghc.haskell.org/trac/ghc/wiki/Exceptions/StackTraces>

## Recapping DWARF

* DWARF support usable in GHC 8.2
* Should we provide debug-enabled binary distributions?
* Future directions: 
    - Statistical profiling
    - Integration with exception system
    - Facilitate insight into Core-to-Core, STG pipelines
    - See <https://ghc.haskell.org/trac/ghc/wiki/DWARF/Status>


## Cost-center profiler modernization (`@bgamari`)

* Heap profiler can now emit sample data to event log
    - Allows correlation with other program events
    - Live-streaming of eventlog data (new in 8.2, `@alexbiehl`)
    - Usage
        - Compile with `ghc -eventlog -prof`
        - Run program with `+RTS -l -h`

. . .

* New JSON format for `.prof` files for easier integration with tooling
    - Usage
        - Compile with `ghc -prof`
        - Run program with `+RTS -pj`

# Deriving strategies (`@RyanGlScott`)
## Deriving strategies

```haskell
data MyType = MyType {...}
            deriving (Ord, Eq, Show)
```

## Deriving strategies (Generics)

```haskell
data MyType = MyType {...}
            deriving (Ord, Eq, Show,
                      Generic)
```

## Deriving strategies (Generics)

```haskell
data MyType = MyType {...}
            deriving (Ord, Eq, Show,
                      Generic)
                      
instance FromJSON MyType
instance ToJSON MyType
```

## Deriving strategies (`DeriveAnyClass`)

```haskell
data MyType = MyType {...}
            deriving (Ord, Eq, Show,
                      Generic,
                      FromJSON, ToJSON)
```

## Deriving strategies (`DeriveAnyClass` + `GNTD`)

```haskell
newtype MyType = MyType {...}
               deriving (Ord, Eq, Show,
                         Generic,
                         FromJSON, ToJSON)
```


## Deriving strategies
Solves the long-standing friction between `DeriveAnyClass` and `GeneralizedNewtypeDeriving`

```haskell
newtype MyType = MyType {...}
               -- derive with "built-in" logic
               deriving stock (Eq, Show, Generic)
               -- derive with GeneralizedNewtypeDeriving
               deriving newtype (Binary)
               -- derive with DeriveAnyClass
               deriving anyclass (FromJSON, ToJSON)
```


## Other great things in 8.2

 * More robust levity polymorphism story (`@goldfire` & `@simonpj`)
 * `StaticPointers` support in GHCi (`@bgamari`)
 * Unpacked sum types (`@osa1`)
 * NUMA support in the runtime system (`@simonmar`)
 * More robust join points (`@lukemaurer`)
 * Backpack! (`@ezyang`)
 * `OverloadedRecordFields` (`@adamgundry`)
 * Interface-file determinism (`@niteria`)
 * Improved cross-compilation support (`@angerman` & `@bgamari`)
 * JSON error messages (`@mpickering`)


## Other great things in 8.2

 * Pretty error messages (`@Rufflewind`):
 
   ![](pretty-error.png)

<div class=notes>
* I would like to see more in this direction.
* We are really close and the direction is clear (#8809)
</div>
 
# 8.4 and beyond

## Other great things to come

 * Loop annotations (`@tjakway`)
 
    * Teach backend to recognize loops, be more careful in register allocation and code gen.
      <div class=notes>May fit nicely with join points work (#13567)</div>

 * Better support for developer tooling
    * Make `-fno-code` usable for `ghc-mod` and friends (`@duog`)
    * Prettier error messages (`@adinapoli`)
    
 * A new Shake-based build system, Hadrian (`@snowleopard`)
 
 * Linear types (Tweag I/O)
 
 * Dependent Haskell (`@goldfire`)
 
 * Dynamic linking on Windows (`@Phyx`)

## Coming changes in GHC development

 * Improved CI infrastructure (`@davean`, `@bgamari`)
 
    - Faster turnaround for contributors
    - Nightly builds
    - Regular testing of more of GHC's surface area
    - More efficient release process
    - Less tree brokenness
    
## Thank you!

Questions?

- email: <ben@well-typed.com>
- irc: `bgamari`

## References {.allowframebreaks}
